============================= test session starts ==============================
platform linux -- Python 3.10.10, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/seuronao/Documents/Equation Solver-04-24-2023-03-36-22/guisena08
collected 20 items

test_grau_1.py FFFFFFF                                                   [ 35%]
test_grau_2.py FFFFFFFF                                                  [ 75%]
test_grau_invalido.py FFFFF                                              [100%]

=================================== FAILURES ===================================
________________ test_grau_1_a_0[test_input0-expected_output0] _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7da2020>
test_input = []
expected_output = ['A equação é do primeiro grau', 'Valor de a inválido']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "0"], ["A equação é do primeiro grau", "Valor de a inválido"]),
        ],
    )
    def test_grau_1_a_0(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: str):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'Equação do primeiro grau\nValor inválido.'
E            +  where 'Equação do primeiro grau\nValor inválido.' = <built-in method strip of str object at 0x7f41f7efea30>()
E            +    where <built-in method strip of str object at 0x7f41f7efea30> = 'Equação do primeiro grau\nValor inválido.\n'.strip
E            +      where 'Equação do primeiro grau\nValor inválido.\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbe4d0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbe4d0> = <_io.StringIO object at 0x7f41f7dbe4d0>.getvalue

test_grau_1.py:29: AssertionError
__________________ test_grau_1[test_input0-expected_output0] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7dee560>
test_input = [], expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'Equação do primeiro grau\no valor da raiz é 0.00'
E            +  where 'Equação do primeiro grau\no valor da raiz é 0.00' = <built-in method strip of str object at 0x7f41f7ddf630>()
E            +    where <built-in method strip of str object at 0x7f41f7ddf630> = 'Equação do primeiro grau\no valor da raiz é 0.00\n'.strip
E            +      where 'Equação do primeiro grau\no valor da raiz é 0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf0a0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf0a0> = <_io.StringIO object at 0x7f41f7dbf0a0>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input1-expected_output1] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7da30d0>
test_input = [], expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'Equação do primeiro grau\no valor da raiz é 0.00'
E            +  where 'Equação do primeiro grau\no valor da raiz é 0.00' = <built-in method strip of str object at 0x7f41f7ddf830>()
E            +    where <built-in method strip of str object at 0x7f41f7ddf830> = 'Equação do primeiro grau\no valor da raiz é 0.00\n'.strip
E            +      where 'Equação do primeiro grau\no valor da raiz é 0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf250>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf250> = <_io.StringIO object at 0x7f41f7dbf250>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input2-expected_output2] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7da2e90>
test_input = [], expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'Equação do primeiro grau\no valor da raiz é 0.00'
E            +  where 'Equação do primeiro grau\no valor da raiz é 0.00' = <built-in method strip of str object at 0x7f41f7efcc30>()
E            +    where <built-in method strip of str object at 0x7f41f7efcc30> = 'Equação do primeiro grau\no valor da raiz é 0.00\n'.strip
E            +      where 'Equação do primeiro grau\no valor da raiz é 0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbe290>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbe290> = <_io.StringIO object at 0x7f41f7dbe290>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input3-expected_output3] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7da2fe0>
test_input = [], expected_output = ['A equação é do primeiro grau', '5.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'Equação do primeiro grau\no valor da raiz é -5.00'
E            +  where 'Equação do primeiro grau\no valor da raiz é -5.00' = <built-in method strip of str object at 0x7f41f7effeb0>()
E            +    where <built-in method strip of str object at 0x7f41f7effeb0> = 'Equação do primeiro grau\no valor da raiz é -5.00\n'.strip
E            +      where 'Equação do primeiro grau\no valor da raiz é -5.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf6d0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf6d0> = <_io.StringIO object at 0x7f41f7dbf6d0>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input4-expected_output4] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7f30f40>
test_input = [], expected_output = ['A equação é do primeiro grau', '-2.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'Equação do primeiro grau\no valor da raiz é 2.00'
E            +  where 'Equação do primeiro grau\no valor da raiz é 2.00' = <built-in method strip of str object at 0x7f41f7ddfb30>()
E            +    where <built-in method strip of str object at 0x7f41f7ddfb30> = 'Equação do primeiro grau\no valor da raiz é 2.00\n'.strip
E            +      where 'Equação do primeiro grau\no valor da raiz é 2.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf130>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf130> = <_io.StringIO object at 0x7f41f7dbf130>.getvalue

test_grau_1.py:56: AssertionError
__________________ test_grau_1[test_input5-expected_output5] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7dee3e0>
test_input = [], expected_output = ['A equação é do primeiro grau', '2.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do primeiro grau' in 'Equação do primeiro grau\no valor da raiz é -2.00'
E            +  where 'Equação do primeiro grau\no valor da raiz é -2.00' = <built-in method strip of str object at 0x7f41f7ddfd30>()
E            +    where <built-in method strip of str object at 0x7f41f7ddfd30> = 'Equação do primeiro grau\no valor da raiz é -2.00\n'.strip
E            +      where 'Equação do primeiro grau\no valor da raiz é -2.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbfac0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbfac0> = <_io.StringIO object at 0x7f41f7dbfac0>.getvalue

test_grau_1.py:56: AssertionError
________________ test_grau_2_a_0[test_input0-expected_output0] _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7f309d0>
test_input = []
expected_output = ['A equação é do segundo grau', 'Valor de a inválido']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "0"], ["A equação é do segundo grau", "Valor de a inválido"]),
        ],
    )
    def test_grau_2_a_0(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'Equação do segundo grau.\nvalor invalido!'
E            +  where 'Equação do segundo grau.\nvalor invalido!' = <built-in method strip of str object at 0x7f41f7ddff30>()
E            +    where <built-in method strip of str object at 0x7f41f7ddff30> = 'Equação do segundo grau.\nvalor invalido!\n'.strip
E            +      where 'Equação do segundo grau.\nvalor invalido!\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf7f0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf7f0> = <_io.StringIO object at 0x7f41f7dbf7f0>.getvalue

test_grau_2.py:29: AssertionError
__________________ test_grau_2[test_input0-expected_output0] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7e2a680>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui uma raiz real', 'A equação possui apenas uma raiz real', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'Equação do segundo grau.\nA equação possui apenas uma raiz real-0.00'
E            +  where 'Equação do segundo grau.\nA equação possui apenas uma raiz real-0.00' = <built-in method strip of str object at 0x7f41f7e2c030>()
E            +    where <built-in method strip of str object at 0x7f41f7e2c030> = 'Equação do segundo grau.\nA equação possui apenas uma raiz real-0.00\n'.strip
E            +      where 'Equação do segundo grau.\nA equação possui apenas uma raiz real-0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf400>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf400> = <_io.StringIO object at 0x7f41f7dbf400>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input1-expected_output1] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7f312a0>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação não possui raízes reais']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'Equação do segundo grau.\nA equação não possui raízes reais'
E            +  where 'Equação do segundo grau.\nA equação não possui raízes reais' = <built-in method strip of str object at 0x7f41f7e2c810>()
E            +    where <built-in method strip of str object at 0x7f41f7e2c810> = 'Equação do segundo grau.\nA equação não possui raízes reais\n'.strip
E            +      where 'Equação do segundo grau.\nA equação não possui raízes reais\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7e2c790>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7e2c790> = <_io.StringIO object at 0x7f41f7e2c790>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input2-expected_output2] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7e2b250>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui duas raízes reais', '-1.00', '1.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'Equação do segundo grau.\n`A equação possui duas raízes reais-1.00 e 1.00'
E            +  where 'Equação do segundo grau.\n`A equação possui duas raízes reais-1.00 e 1.00' = <built-in method strip of str object at 0x7f41f7e38210>()
E            +    where <built-in method strip of str object at 0x7f41f7e38210> = 'Equação do segundo grau.\n`A equação possui duas raízes reais-1.00 e 1.00 \n'.strip
E            +      where 'Equação do segundo grau.\n`A equação possui duas raízes reais-1.00 e 1.00 \n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7e2ce50>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7e2ce50> = <_io.StringIO object at 0x7f41f7e2ce50>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input3-expected_output3] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7e2ad70>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui duas raízes reais', '-1.00', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'Equação do segundo grau.\n`A equação possui duas raízes reais-1.00 e 0.00'
E            +  where 'Equação do segundo grau.\n`A equação possui duas raízes reais-1.00 e 0.00' = <built-in method strip of str object at 0x7f41f7e38530>()
E            +    where <built-in method strip of str object at 0x7f41f7e38530> = 'Equação do segundo grau.\n`A equação possui duas raízes reais-1.00 e 0.00 \n'.strip
E            +      where 'Equação do segundo grau.\n`A equação possui duas raízes reais-1.00 e 0.00 \n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7e2d480>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7e2d480> = <_io.StringIO object at 0x7f41f7e2d480>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input4-expected_output4] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7e29930>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação não possui raízes reais']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'Equação do segundo grau.\nA equação não possui raízes reais'
E            +  where 'Equação do segundo grau.\nA equação não possui raízes reais' = <built-in method strip of str object at 0x7f41f7e2daa0>()
E            +    where <built-in method strip of str object at 0x7f41f7e2daa0> = 'Equação do segundo grau.\nA equação não possui raízes reais\n'.strip
E            +      where 'Equação do segundo grau.\nA equação não possui raízes reais\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7e2da20>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7e2da20> = <_io.StringIO object at 0x7f41f7e2da20>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input5-expected_output5] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7e29660>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui duas raízes reais', '-2.00', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'Equação do segundo grau.\n`A equação possui duas raízes reais-2.00 e 0.00'
E            +  where 'Equação do segundo grau.\n`A equação possui duas raízes reais-2.00 e 0.00' = <built-in method strip of str object at 0x7f41f7e38a30>()
E            +    where <built-in method strip of str object at 0x7f41f7e38a30> = 'Equação do segundo grau.\n`A equação possui duas raízes reais-2.00 e 0.00 \n'.strip
E            +      where 'Equação do segundo grau.\n`A equação possui duas raízes reais-2.00 e 0.00 \n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7e2e0e0>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7e2e0e0> = <_io.StringIO object at 0x7f41f7e2e0e0>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input6-expected_output6] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7e2a830>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui uma raiz real', 'A equação possui apenas uma raiz real', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação é do segundo grau' in 'Equação do segundo grau.\nA equação possui apenas uma raiz real-0.00'
E            +  where 'Equação do segundo grau.\nA equação possui apenas uma raiz real-0.00' = <built-in method strip of str object at 0x7f41f7e2e790>()
E            +    where <built-in method strip of str object at 0x7f41f7e2e790> = 'Equação do segundo grau.\nA equação possui apenas uma raiz real-0.00\n'.strip
E            +      where 'Equação do segundo grau.\nA equação possui apenas uma raiz real-0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7e2e710>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7e2e710> = <_io.StringIO object at 0x7f41f7e2e710>.getvalue

test_grau_2.py:64: AssertionError
___________________ test_grau_invalido[-1-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7f304c0>
test_input = '-1', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'Grau Invalido'
E        +  where 'Grau Invalido' = <built-in method strip of str object at 0x7f41f7e17af0>()
E        +    where <built-in method strip of str object at 0x7f41f7e17af0> = 'Grau Invalido\n'.strip
E        +      where 'Grau Invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf7f0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbf7f0> = <_io.StringIO object at 0x7f41f7dbf7f0>.getvalue

test_grau_invalido.py:31: AssertionError
___________________ test_grau_invalido[-3-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7def310>
test_input = '-3', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'Grau Invalido'
E        +  where 'Grau Invalido' = <built-in method strip of str object at 0x7f41f7e16030>()
E        +    where <built-in method strip of str object at 0x7f41f7e16030> = 'Grau Invalido\n'.strip
E        +      where 'Grau Invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbe200>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbe200> = <_io.StringIO object at 0x7f41f7dbe200>.getvalue

test_grau_invalido.py:31: AssertionError
____________________ test_grau_invalido[0-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7da0190>
test_input = '0', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'Grau Invalido'
E        +  where 'Grau Invalido' = <built-in method strip of str object at 0x7f41f7f39870>()
E        +    where <built-in method strip of str object at 0x7f41f7f39870> = 'Grau Invalido\n'.strip
E        +      where 'Grau Invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7f94c10>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7f94c10> = <_io.StringIO object at 0x7f41f7f94c10>.getvalue

test_grau_invalido.py:31: AssertionError
____________________ test_grau_invalido[3-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7f30940>
test_input = '3', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'Grau Invalido'
E        +  where 'Grau Invalido' = <built-in method strip of str object at 0x7f41f7dc66f0>()
E        +    where <built-in method strip of str object at 0x7f41f7dc66f0> = 'Grau Invalido\n'.strip
E        +      where 'Grau Invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7dbe200>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7dbe200> = <_io.StringIO object at 0x7f41f7dbe200>.getvalue

test_grau_invalido.py:31: AssertionError
___________________ test_grau_invalido[10-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f41f7da20b0>
test_input = '10', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert expected_output in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Grau inválido' in 'Grau Invalido'
E        +  where 'Grau Invalido' = <built-in method strip of str object at 0x7f41f7e0e3b0>()
E        +    where <built-in method strip of str object at 0x7f41f7e0e3b0> = 'Grau Invalido\n'.strip
E        +      where 'Grau Invalido\n' = <built-in method getvalue of _io.StringIO object at 0x7f41f7e2cee0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f41f7e2cee0> = <_io.StringIO object at 0x7f41f7e2cee0>.getvalue

test_grau_invalido.py:31: AssertionError
=========================== short test summary info ============================
FAILED test_grau_1.py::test_grau_1_a_0[test_input0-expected_output0] - Assert...
FAILED test_grau_1.py::test_grau_1[test_input0-expected_output0] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input1-expected_output1] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input2-expected_output2] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input3-expected_output3] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input4-expected_output4] - AssertionE...
FAILED test_grau_1.py::test_grau_1[test_input5-expected_output5] - AssertionE...
FAILED test_grau_2.py::test_grau_2_a_0[test_input0-expected_output0] - Assert...
FAILED test_grau_2.py::test_grau_2[test_input0-expected_output0] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input1-expected_output1] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input2-expected_output2] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input3-expected_output3] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input4-expected_output4] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input5-expected_output5] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input6-expected_output6] - AssertionE...
FAILED test_grau_invalido.py::test_grau_invalido[-1-Grau inv\xe1lido] - Asser...
FAILED test_grau_invalido.py::test_grau_invalido[-3-Grau inv\xe1lido] - Asser...
FAILED test_grau_invalido.py::test_grau_invalido[0-Grau inv\xe1lido] - Assert...
FAILED test_grau_invalido.py::test_grau_invalido[3-Grau inv\xe1lido] - Assert...
FAILED test_grau_invalido.py::test_grau_invalido[10-Grau inv\xe1lido] - Asser...
============================== 20 failed in 0.15s ==============================
